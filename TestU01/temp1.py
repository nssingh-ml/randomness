import math

def coupon_collector_test_binary(data, confidence_level=0.01):
    """
    Implements the Coupon Collector's Test for randomness for binary sequences (0 and 1).

    Parameters:
        data (list): Sequence of binary values (0s and 1s).
        confidence_level (float): Significance level to determine randomness. Default is 0.01.

    Returns:
        Tuple: (p_value, result, details), where p_value is the calculated p-value, 
               result is "Random" or "Non-Random", and details include observed and expected values.
    """
    # Ensure input is binary
    if not all(bit in (0, 1) for bit in data):
        raise ValueError("Input data must only contain binary values (0 and 1).")

    n = len(data)
    num_symbols = 2  # Only two symbols: 0 and 1

    if n < num_symbols:
        raise ValueError("Input data is too short to contain both symbols (0 and 1).")

    # Count occurrences of each symbol
    count_0 = data.count(0)
    count_1 = data.count(1)

    symbol_counts = [count_0, count_1]

    # Check if both symbols are present
    if any(count == 0 for count in symbol_counts):
        raise ValueError("Not all symbols (0 and 1) are present in the data.")

    # Calculate observed and expected values
    observed = sum(count > 0 for count in symbol_counts)
    expected = num_symbols * (1 - ((num_symbols - 1) / num_symbols) ** n)

    # Calculate variance
    variance = num_symbols * (1 - ((num_symbols - 1) / num_symbols) ** n) * ((num_symbols - 1) / num_symbols) ** n

    # Ensure variance is positive
    if variance <= 0:
        raise ValueError("Variance is non-positive. Cannot perform the test.")

    # Calculate z-score
    z = (observed - expected) / math.sqrt(variance)

    # Convert z-score to p-value
    p_value = 2 * (1 - math.erf(abs(z) / math.sqrt(2)))

    # Determine randomness based on p-value
    result = "Random" if p_value > confidence_level else "Non-Random"

    # Include details in output
    details = {
        "observed": observed,
        "expected": expected,
        "variance": variance,
        "z_score": z
    }

    return p_value, result, details


if __name__ == "__main__":
    # Binary input
    binary_input
    
    # Convert string to list of integers (binary format)
    # binary_data = [int(bit) for bit in binary_input]
    binary_data  = list(map(int, binary_input))
    # print(binary_data)

    try:
        p_value, result, details = coupon_collector_test_binary(binary_data)
        print(f"Coupon Collector's Test (Binary):")
        print(f"  P-Value: {p_value}")
        print(f"  Result: {result}")
        print(f"  Details: {details}")
    except Exception as e:
        print(f"Error: {e}")
